{
    "lambda_errors": {
        "standard": {
            "ErrorEquals": [
                "Lambda.ServiceException",
                "Lambda.AWSLambdaException",
                "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
        },
        "timeout": {
            "ErrorEquals": [
                "Lambda.ClientExecutionTimeoutException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 1.5
        },
        "throttling": {
            "ErrorEquals": [
                "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 5,
            "BackoffRate": 2
        }
    },
    "service_integrations": {
        "dynamodb": {
            "ErrorEquals": [
                "DynamoDB.ConditionalCheckFailedException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        },
        "sqs": {
            "ErrorEquals": [
                "SQS.QueueDoesNotExist"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        },
        "sns": {
            "ErrorEquals": [
                "SNS.EndpointDisabled"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        }
    },
    "states_errors": {
        "all": {
            "ErrorEquals": [
                "States.ALL"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        },
        "timeout": {
            "ErrorEquals": [
                "States.Timeout"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 1.5
        },
        "task_failed": {
            "ErrorEquals": [
                "States.TaskFailed"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        }
    },
    "custom_errors": {
        "validation": {
            "ErrorEquals": [
                "ValidationError"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 2,
            "BackoffRate": 2
        },
        "business_logic": {
            "ErrorEquals": [
                "BusinessLogicError"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
        },
        "data_quality": {
            "ErrorEquals": [
                "DataQualityError"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 0
        }
    },
    "catch_configurations": {
        "dead_letter_queue": {
            "ErrorEquals": [
                "States.ALL"
            ],
            "Next": "SendToDeadLetterQueue"
        },
        "notification": {
            "ErrorEquals": [
                "States.ALL"
            ],
            "Next": "SendErrorNotification"
        },
        "fallback": {
            "ErrorEquals": [
                "States.ALL"
            ],
            "Next": "HandleError",
            "ResultPath": "$.error"
        }
    }
}